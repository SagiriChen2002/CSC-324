Date = gsub(",.*", "", TIME)) %>%
mutate(start_time = paste(Date, start_time),
end_time = paste(Date, end_time))
# Assuming the year is missing and you know it (let's say 2023), add it
year <- "2024"
data$start_time <- paste(year, data$start_time)
data$end_time <- paste(year, data$end_time)
# Convert to datetime format
data$start_time <- mdy_hm(data$start_time)
# Split the 'Time' column into two: 'start_time' and 'end_time'
data <- data %>%
mutate(start_time = gsub(" - .*", "", TIME),
end_time = gsub(".*- ", "", TIME),
Date = gsub(",.*", "", TIME)) %>%
mutate(start_time = paste(Date, start_time),
end_time = paste(Date, end_time))
# Split the 'Time' column into two: 'start_time' and 'end_time'
data <- data %>%
mutate(start_time = gsub(" - .*", "", TIME),
end_time = gsub(".*- ", "", TIME),
Date = gsub(",.*", "", TIME)) %>%
mutate(start_time = paste(start_time),
end_time = paste(Date, end_time))
# Assuming the year is missing and you know it (let's say 2023), add it
year <- "2024"
data$start_time <- paste(year, data$start_time)
data$end_time <- paste(year, data$end_time)
# Convert to datetime format
data$start_time <- mdy_hm(data$start_time)
data$end_time <- mdy_hm(data$end_time)
# Split the 'Time' column into two: 'start_time' and 'end_time'
data <- data %>%
mutate(start_time = gsub(" - .*", "", TIME),
end_time = gsub(".*- ", "", TIME),
Date = gsub(",.*", "", TIME)) %>%
mutate(start_time = paste(start_time),
end_time = paste(Date, end_time))
# Assuming the year is missing and you know it (let's say 2023), add it
year <- "2024"
data$start_time <- paste(year, data$start_time)
# Load necessary libraries
library(dplyr)
library(lubridate)
library(ggplot2)
# Load the data
data <- read.csv("time_logs.csv")
# Split the 'TIME' column into 'Start' and 'End', assuming 'TIME' format is "2024-01-26 8:30PM - 10:28PM"
data <- data %>%
mutate(StartTime = gsub(" - .*", "", TIME),
EndTime = gsub(".*- ", "", TIME),
Date = as.Date(StartTime, format="%Y-%m-%d"))
# Convert 'StartTime' and 'EndTime' to POSIXct, assuming they are in the same day
data <- data %>%
mutate(StartTime = mdy_hm(paste(Date, substr(StartTime, 12, 20))),
EndTime = mdy_hm(paste(Date, EndTime)))
# Split the 'TIME' column into 'Start' and 'End', assuming 'TIME' format is "2024-01-26 8:30PM - 10:28PM"
data <- data %>%
mutate(StartTime = gsub(" - .*", "", TIME),
EndTime = gsub(".*- ", "", TIME),
Date = as.Date(StartTime, format="%Y-%m-%d"))
# Convert 'StartTime' and 'EndTime' to POSIXct, assuming they are in the same day
data <- data %>%
mutate(StartTime = mdy_hm(paste(Date, substr(StartTime, 12, 20))),
EndTime = mdy_hm(paste(Date, EndTime)))
# Split the 'TIME' column into 'Start' and 'End', assuming 'TIME' format is "2024-01-26 8:30PM - 10:28PM"
data <- data %>%
mutate(StartTime = gsub(" - .*", "", TIME),
EndTime = gsub(".*- ", "", TIME),
Date = as.Date(StartTime, format="%Y-%m-%d"))
# Convert 'StartTime' and 'EndTime' to POSIXct, assuming they are in the same day
data <- data %>%
mutate(StartTime = mdy_hm(paste(StartTime))s,
# Convert 'StartTime' and 'EndTime' to POSIXct, assuming they are in the same day
data <- data %>%
mutate(StartTime = mdy_hm(paste(StartTime)),
EndTime = mdy_hm(paste(Date, EndTime)))
# Split the 'TIME' column into 'Start' and 'End', assuming 'TIME' format is "2024-01-26 8:30PM - 10:28PM"
data <- data %>%
mutate(StartTime = gsub(" - .*", "", TIME),
EndTime = gsub(".*- ", "", TIME),
Date = as.Date(StartTime, format="%Y-%m-%d"))
mdy_hm(2024-01-01 8:30PM)
mdy_hm(2024-01-01 8:30PM)
mdy_hm(2024-01-01 8:30)
mdy_hm(2024-01-01 8/30)
mdy_hm(2024-01-01 830)
mdy_hm(2024-01-01 8:30)
date_time <- mdy_hm("01-26-2024 8:30PM")
print(date_time)
print(date_time)
date_time <- mdy_hm("2024-01-01 8:30PM")
# Load the data
data <- read.csv("time_logs.csv")
# Split the 'TIME' column into 'Start' and 'End', assuming 'TIME' format is "2024-01-26 8:30PM - 10:28PM"
data <- data %>%
mutate(StartTime = gsub(" - .*", "", TIME),
EndTime = gsub(".*- ", "", TIME),
Date = as.Date(StartTime, format="%Y-%m-%d"))
# Convert 'StartTime' and 'EndTime' to POSIXct, assuming they are in the same day
data <- data %>%
mutate(StartTime = mdy_hm(paste(StartTime)),
EndTime = mdy_hm(paste(Date, EndTime)))
# Calculate the duration in hours or minutes
data <- data %>%
mutate(Duration = as.numeric(difftime(EndTime, StartTime, units="hours")))  # Or use 'mins' for minutes
# View the modified data
head(data)
# Split the 'TIME' column into 'Start' and 'End', assuming 'TIME' format is "2024-01-26 8:30PM - 10:28PM"
data <- data %>%
mutate(StartTime = gsub(" - .*", "", TIME),
EndTime = gsub(".*- ", "", TIME),
Date = as.Date(StartTime, format="%Y-%m-%d"))
# Split the 'TIME' column into 'Start' and 'End', assuming 'TIME' format is "2024-01-26 8:30PM - 10:28PM"
data <- data %>%
mutate(StartTime = gsub(" - .*", "", TIME),
EndTime = gsub(".*- ", "", TIME),
Date = as.Date(StartTime, format="%m-%d-%Y"))
# Split the 'TIME' column into 'Start' and 'End', assuming 'TIME' format is "2024-01-26 8:30PM - 10:28PM"
data <- data %>%
mutate(StartTime = gsub(" - .*", "", TIME),
EndTime = gsub(".*- ", "", TIME),
Date = as.Date(StartTime, format="%m-%d-%Y"))
# Convert 'StartTime' and 'EndTime' to POSIXct, assuming they are in the same day
data <- data %>%
mutate(StartTime = mdy_hm(paste(StartTime)),
EndTime = mdy_hm(paste(substr(data$Start, 1, 11), EndTime)))
# Calculate the duration in hours or minutes
data <- data %>%
mutate(Duration = as.numeric(difftime(EndTime, StartTime, units="hours")))  # Or use 'mins' for minutes
# View the modified data
head(data)
# Calculate the duration in hours or minutes
data <- data %>%
mutate(Duration = as.numeric(difftime(EndTime, StartTime, units="mins")))  # Or use 'mins' for minutes
# View the modified data
head(data)
# Plotting the start times
ggplot(data, aes(x=Start, y=Value)) +  # Replace 'Value' with the actual value column name
geom_point() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
# Plotting the start times
ggplot(data, aes(x=Date, y=Duration)) +  # Replace 'Value' with the actual value column name
geom_point() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
ggplot(data, aes(x=WEEK, y=Duration)) +
geom_boxplot() +
labs(title="Weekly Event Duration Distribution", x="Week", y="Duration (Hours)") +
theme_minimal()
ggplot(data, aes(x=WEEK, y=Duration)) +
geom_barplot() +
labs(title="Weekly Event Duration Distribution", x="Week", y="Duration (Hours)") +
theme_minimal()
ggplot(data, aes(x=WEEK, y=Duration)) +
geom_bar() +
labs(title="Weekly Event Duration Distribution", x="Week", y="Duration (Hours)") +
theme_minimal()
g
ggplot(data, aes(x=Date, y=Duration)) +
geom_bar() +
labs(title="Weekly Event Duration Distribution", x="Week", y="Duration (Hours)") +
theme_minimal()
# Plotting the start times
ggplot(data, aes(x=Date, y=Duration)) +  # Replace 'Value' with the actual value column name
geom_point() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
# Plotting the start times
ggplot(data, aes(x=Date, y=Duration)) +  # Replace 'Value' with the actual value column name
geom_bar() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
# Plotting the start times
ggplot(data, aes(x=Date, y=Duration)) +  # Replace 'Value' with the actual value column name
geom_point() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ WEEK, data, mean, na.rm = TRUE)
# Create a bar plot
barplot(aggregate_data$Duration,
names.arg = aggregate_data$WEEK,
col = "blue",
main = "Average Event Duration by Week",
xlab = "Week",
ylab = "Average Duration (Hours)",
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.8)  # Adjusts the size of the week labels
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ Date, data, mean, na.rm = TRUE)
# Create a bar plot
barplot(aggregate_data$Duration,
names.arg = aggregate_data$Date,
col = "blue",
main = "Average Event Duration by Week",
xlab = "Week",
ylab = "Average Duration (Hours)",
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.8)  # Adjusts the size of the week labels
# Create a bar plot
barplot(aggregate_data$Duration,
names.arg = aggregate_data$Date,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.5)  # Adjusts the size of the week labels
# Create a bar plot
barplot(aggregate_data$Duration,
names.arg = aggregate_data$Date,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
# Calculate the duration in hours or minutes
data <- data %>%
mutate(Duration = as.numeric(difftime(EndTime, StartTime, units="hr")))  # Or use 'mins' for minutes
# Calculate the duration in hours or minutes
data <- data %>%
mutate(Duration = as.numeric(difftime(EndTime, StartTime, units="hours")))  # Or use 'mins' for minutes
# View the modified data
head(data)
# Plotting the start times
ggplot(data, aes(x=Date, y=Duration)) +  # Replace 'Value' with the actual value column name
geom_point() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ Date, data, mean, na.rm = TRUE)
# Create a bar plot
barplot(aggregate_data$Duration,
names.arg = aggregate_data$Date,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ Date, data, mean, na.rm = TRUE)
# Create a bar plot
y_max <- max(aggregate_data$Duration) * 1.1  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$Date,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
# Plotting the start times
ggplot(data, aes(x=Date, y=Duration)) +  # Replace 'Value' with the actual value column name
geom_point() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ Date, data, mean, na.rm = TRUE)
# Create a bar plot
y_max <- max(aggregate_data$Duration) * 1.1  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$Date,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
# Load necessary libraries
library(dplyr)
library(lubridate)
library(ggplot2)
# Load the data
data <- read.csv("time_logs.csv")
# Split the 'TIME' column into 'Start' and 'End', assuming 'TIME' format is "2024-01-26 8:30PM - 10:28PM"
data <- data %>%
mutate(StartTime = gsub(" - .*", "", TIME),
EndTime = gsub(".*- ", "", TIME),
Date = as.Date(StartTime, format="%m-%d-%Y"))
# Convert 'StartTime' and 'EndTime' to POSIXct, assuming they are in the same day
data <- data %>%
mutate(StartTime = mdy_hm(paste(StartTime)),
EndTime = mdy_hm(paste(substr(data$Start, 1, 11), EndTime)))
# Calculate the duration in hours or minutes
data <- data %>%
mutate(Duration = as.numeric(difftime(EndTime, StartTime, units="hours")))  # Or use 'mins' for minutes
# View the modified data
head(data)
# Plotting the start times
ggplot(data, aes(x=Date, y=Duration)) +  # Replace 'Value' with the actual value column name
geom_point() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ Date, data, mean, na.rm = TRUE)
# Create a bar plot
y_max <- max(aggregate_data$Duration) * 1.1  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$Date,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ substr(Date, 6, 11), data, mean, na.rm = TRUE)
# Create a bar plot
y_max <- max(aggregate_data$Duration) * 1.1  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$Date,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ substr(Date, 1, 11), data, mean, na.rm = TRUE)
# Create a bar plot
y_max <- max(aggregate_data$Duration) * 1.1  # Adds 10% padding to the max value for better display
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ substr(Date, 1, 11), data, mean, na.rm = TRUE)
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ Date, data, mean, na.rm = TRUE)
# Create a bar plot
y_max <- max(aggregate_data$Duration) * 1.1  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$Date,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
# Create a bar plot
aggregate_data$FormattedDate <- format(aggregate_data$Date, "%m-%d")
y_max <- max(aggregate_data$Duration) * 1.1  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$FormattedDate,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
y_max <- 2.5  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$FormattedDate,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
# Plotting the start times
ggplot(data, aes(x=Date, y=Duration)) +  # Replace 'Value' with the actual value column name
geom_point() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ Date, data, mean, na.rm = TRUE)
# Create a bar plot
aggregate_data$FormattedDate <- format(aggregate_data$Date, "%m-%d")
y_max <- 2.5  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$FormattedDate,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
# Load necessary libraries
library(dplyr)
library(lubridate)
library(ggplot2)
# Load the data
data <- read.csv("time_logs.csv")
# Split the 'TIME' column into 'Start' and 'End', assuming 'TIME' format is "2024-01-26 8:30PM - 10:28PM"
data <- data %>%
mutate(StartTime = gsub(" - .*", "", TIME),
EndTime = gsub(".*- ", "", TIME),
Date = as.Date(StartTime, format="%m-%d-%Y"))
# Convert 'StartTime' and 'EndTime' to POSIXct, assuming they are in the same day
data <- data %>%
mutate(StartTime = mdy_hm(paste(StartTime)),
EndTime = mdy_hm(paste(substr(data$Start, 1, 11), EndTime)))
# Calculate the duration in hours or minutes
data <- data %>%
mutate(Duration = as.numeric(difftime(EndTime, StartTime, units="hours")))  # Or use 'mins' for minutes
# View the modified data
head(data)
# Plotting the start times
ggplot(data, aes(x=Date, y=Duration)) +  # Replace 'Value' with the actual value column name
geom_point() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ Date, data, mean, na.rm = TRUE)
# Create a bar plot
aggregate_data$FormattedDate <- format(aggregate_data$Date, "%m-%d")
y_max <- 2.5  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$FormattedDate,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
# Create a bar plot
aggregate_data$FormattedDate <- format(aggregate_data$Date, "%m-%d")
y_max <- 4  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$FormattedDate,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
# Plotting the start times
ggplot(data, aes(x=Date, y=Duration)) +  # Replace 'Value' with the actual value column name
geom_point() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(lubridate)
library(ggplot2)
# Load the data
data <- read.csv("time_logs.csv")
# Split the 'TIME' column into 'Start' and 'End', assuming 'TIME' format is "2024-01-26 8:30PM - 10:28PM"
data <- data %>%
mutate(StartTime = gsub(" - .*", "", TIME),
EndTime = gsub(".*- ", "", TIME),
Date = as.Date(StartTime, format="%m-%d-%Y"))
# Convert 'StartTime' and 'EndTime' to POSIXct, assuming they are in the same day
data <- data %>%
mutate(StartTime = mdy_hm(paste(StartTime)),
EndTime = mdy_hm(paste(substr(data$Start, 1, 11), EndTime)))
# Calculate the duration in hours or minutes
data <- data %>%
mutate(Duration = as.numeric(difftime(EndTime, StartTime, units="hours")))  # Or use 'mins' for minutes
# View the modified data
head(data)
# Plotting the start times
ggplot(data, aes(x=Date, y=Duration)) +  # Replace 'Value' with the actual value column name
geom_point() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ Date, data, mean, na.rm = TRUE)
# Create a bar plot
aggregate_data$FormattedDate <- format(aggregate_data$Date, "%m-%d")
y_max <- 4  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$FormattedDate,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
y_max <- 8  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$FormattedDate,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
y_max <- 6  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$FormattedDate,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
