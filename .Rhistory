dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Less than HS Diploma: ", Education_Less_HS, "%<br>",
"High School Diploma Only: ", High_School_Diploma_Only, "%<br>",
"Some College: ", Some_College, "%<br>",
"Bachelor's or Higher: ", Bachelors_Or_Higher, "%")
) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", merged_data$Education_Less_HS), values = ~Education_Less_HS,
title = "Percent < HS Diploma",
opacity = 0.7)
})
observeEvent(input$apply, {
output$mapOutput <- renderLeaflet({
data <- educationData() # Re-fetch the reactive education data
leaflet(data = merged_data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Less_HS)(Education_Less_HS),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Less than HS Diploma: ", Education_Less_HS, "%<br>",
"High School Diploma Only: ", High_School_Diploma_Only, "%<br>",
"Some College: ", Some_College, "%<br>",
"Bachelor's or Higher: ", Bachelors_Or_Higher, "%")
) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", merged_data$Education_Less_HS), values = ~Education_Less_HS,
title = "Percent < HS Diploma",
opacity = 0.7)
})
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE),
Education_Less_HS = mean(`Percent of adults with less than a high school diploma`, na.rm = TRUE),
High_School_Diploma_Only = mean(`Percent of adults with a high school diploma only`, na.rm = TRUE),
Some_College = mean(`Percent of adults with some college or associate's degree`, na.rm = TRUE),
Bachelors_Or_Higher = mean(`Percent of adults with a bachelor's degree or higher`, na.rm = TRUE))
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
output$mapOutput <- renderLeaflet({
data <- educationData() # Correctly use the reactive expression here
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Less_HS)(Education_Less_HS),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Less than HS Diploma: ", Education_Less_HS, "%<br>",
"High School Diploma Only: ", High_School_Diploma_Only, "%<br>",
"Some College: ", Some_College, "%<br>",
"Bachelor's or Higher: ", Bachelors_Or_Higher, "%")
) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Less_HS), values = ~Education_Less_HS,
title = "Percent < HS Diploma",
opacity = 0.7)
})
# No need for observeEvent if the map automatically updates with input$apply due to reactive dependencies
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE),
Education_Less_HS = mean(`Percent of adults with less than a high school diploma`, na.rm = TRUE),
High_School_Diploma_Only = mean(`Percent of adults with a high school diploma only`, na.rm = TRUE),
Some_College = mean(`Percent of adults with some college or associate's degree`, na.rm = TRUE),
Bachelors_Or_Higher = mean(`Percent of adults with a bachelor's degree or higher`, na.rm = TRUE))
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
output$mapOutput <- renderLeaflet({
leaflet(data = merged_data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Less_HS)(Education_Less_HS),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Less than HS Diploma: ", Education_Less_HS, "%<br>",
"High School Diploma Only: ", High_School_Diploma_Only, "%<br>",
"Some College: ", Some_College, "%<br>",
"Bachelor's or Higher: ", Bachelors_Or_Higher, "%")
) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", merged_data$Education_Less_HS), values = ~Education_Less_HS,
title = "Percent < HS Diploma",
opacity = 0.7)
})
observeEvent(input$apply, {
output$mapOutput <- renderLeaflet({
data <- educationData() # Re-fetch the reactive education data
leaflet(data = merged_data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Less_HS)(Education_Less_HS),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Less than HS Diploma: ", Education_Less_HS, "%<br>",
"High School Diploma Only: ", High_School_Diploma_Only, "%<br>",
"Some College: ", Some_College, "%<br>",
"Bachelor's or Higher: ", Bachelors_Or_Higher, "%")
) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", merged_data$Education_Less_HS), values = ~Education_Less_HS,
title = "Percent < HS Diploma",
opacity = 0.7)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE))
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE))
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE))
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE))
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>% # Fit the map to the US bounds
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
}
# Run the app
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(magrittr)
library(ggplot2)
library(qrcode)
library(lattice)
library(wordcloud2)
library(shiny)
library(leaflet)
library(maps)
library(sf)
library(shinydashboard)
library(lubridate)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE))
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>% # Fit the map to the US bounds
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE))
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>% # Fit the map to the US bounds
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE))
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE))
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>% # Fit the map to the US bounds
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE))
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>% # Fit the map to the US bounds
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
}
# Run the app
shinyApp(ui, server)
