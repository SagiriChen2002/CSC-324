"Some College: ", round(Some_College, 2), "%<br>",
"Bachelor's or Higher: ", round(Bachelors_Or_Higher, 2), "%")
) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
output$covidMapOutput <- renderLeaflet({
data <- covidData() # Use the reactive COVID data
# Generate popup content dynamically based on selected attribute
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile(viridis(100, option = "D"), COVID_Level)(COVID_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Cases: ", formatC(as.integer(Cases), big.mark=","), "<br>",
"Deaths: ", formatC(as.integer(Deaths), big.mark=","), ""))
# ) %>%
# addLegend("bottomright",  pal = colorQuantile("YlOrRd", data$COVID_Level), values = ~COVID_Level,
#           title = input$covidAttribute,
#           opacity = 0.7)
})
# No need for observeEvent if the map automatically updates with input$apply due to reactive dependencies
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
library(viridis) # For color palettes
# Step 1: Create a state name to abbreviation mapping
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE),
Education_Less_HS = mean(`Percent of adults with less than a high school diploma`, na.rm = TRUE),
High_School_Diploma_Only = mean(`Percent of adults with a high school diploma only`, na.rm = TRUE),
Some_College = mean(`Percent of adults completing some college or associate's degree`, na.rm = TRUE),
Bachelors_Or_Higher = mean(`Percent of adults with a bachelor's degree or higher`, na.rm = TRUE)
)
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Reactive expression for loading and preparing COVID data for 2023-03-23
covidData <- reactive({
covid_data <- read_csv("database/us-states-output.csv") %>%
mutate(Date = as.Date(date, format = "%m/%d/%y")) %>%
filter(Date == as.Date("2023-03-23", format = "%Y-%m-%d")) %>%
group_by(state) %>%
summarise(COVID_Level = sum(get(input$covidAttribute), na.rm = TRUE), Cases = sum(Cases, na.rm = TRUE), Deaths = sum(Deaths, na.rm = TRUE))
merged_covid_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(covid_data, by = c("STUSPS" = "state"))
return(merged_covid_data)
})
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>% # Fit the map to the US bounds
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Less than HS Diploma: ", round(Education_Less_HS, 2), "%<br>",
"High School Diploma Only: ", round(High_School_Diploma_Only, 2), "%<br>",
"Some College: ", round(Some_College, 2), "%<br>",
"Bachelor's or Higher: ", round(Bachelors_Or_Higher, 2), "%")
) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
output$covidMapOutput <- renderLeaflet({
data <- covidData() # Use the reactive COVID data
# Generate popup content dynamically based on selected attribute
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("PuBuGn", COVID_Level)(COVID_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Cases: ", formatC(as.integer(Cases), big.mark=","), "<br>",
"Deaths: ", formatC(as.integer(Deaths), big.mark=","), ""))
# ) %>%
# addLegend("bottomright",  pal = colorQuantile("YlOrRd", data$COVID_Level), values = ~COVID_Level,
#           title = input$covidAttribute,
#           opacity = 0.7)
})
# No need for observeEvent if the map automatically updates with input$apply due to reactive dependencies
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
library(viridis) # For color palettes
library(RColorBrewer) # For color palettes
# Step 1: Create a state name to abbreviation mapping
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE),
Education_Less_HS = mean(`Percent of adults with less than a high school diploma`, na.rm = TRUE),
High_School_Diploma_Only = mean(`Percent of adults with a high school diploma only`, na.rm = TRUE),
Some_College = mean(`Percent of adults completing some college or associate's degree`, na.rm = TRUE),
Bachelors_Or_Higher = mean(`Percent of adults with a bachelor's degree or higher`, na.rm = TRUE)
)
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Reactive expression for loading and preparing COVID data for 2023-03-23
covidData <- reactive({
covid_data <- read_csv("database/us-states-output.csv") %>%
mutate(Date = as.Date(date, format = "%m/%d/%y")) %>%
filter(Date == as.Date("2023-03-23", format = "%Y-%m-%d")) %>%
group_by(state) %>%
summarise(COVID_Level = sum(get(input$covidAttribute), na.rm = TRUE), Cases = sum(Cases, na.rm = TRUE), Deaths = sum(Deaths, na.rm = TRUE))
merged_covid_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(covid_data, by = c("STUSPS" = "state"))
return(merged_covid_data)
})
pal <- colorBin(palette = "YlOrRd", domain = c(0, 30), bins = 5, na.color = "transparent")
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>% # Fit the map to the US bounds
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(COVID_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Less than HS Diploma: ", round(Education_Less_HS, 2), "%<br>",
"High School Diploma Only: ", round(High_School_Diploma_Only, 2), "%<br>",
"Some College: ", round(Some_College, 2), "%<br>",
"Bachelor's or Higher: ", round(Bachelors_Or_Higher, 2), "%")
) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
output$covidMapOutput <- renderLeaflet({
data <- covidData() # Use the reactive COVID data
# Generate popup content dynamically based on selected attribute
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("PuBuGn", COVID_Level)(COVID_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Cases: ", formatC(as.integer(Cases), big.mark=","), "<br>",
"Deaths: ", formatC(as.integer(Deaths), big.mark=","), ""))
# ) %>%
# addLegend("bottomright",  pal = colorQuantile("YlOrRd", data$COVID_Level), values = ~COVID_Level,
#           title = input$covidAttribute,
#           opacity = 0.7)
})
# No need for observeEvent if the map automatically updates with input$apply due to reactive dependencies
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
library(viridis) # For color palettes
library(RColorBrewer) # For color palettes
# Step 1: Create a state name to abbreviation mapping
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE),
Education_Less_HS = mean(`Percent of adults with less than a high school diploma`, na.rm = TRUE),
High_School_Diploma_Only = mean(`Percent of adults with a high school diploma only`, na.rm = TRUE),
Some_College = mean(`Percent of adults completing some college or associate's degree`, na.rm = TRUE),
Bachelors_Or_Higher = mean(`Percent of adults with a bachelor's degree or higher`, na.rm = TRUE)
)
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Reactive expression for loading and preparing COVID data for 2023-03-23
covidData <- reactive({
covid_data <- read_csv("database/us-states-output.csv") %>%
mutate(Date = as.Date(date, format = "%m/%d/%y")) %>%
filter(Date == as.Date("2023-03-23", format = "%Y-%m-%d")) %>%
group_by(state) %>%
summarise(COVID_Level = sum(get(input$covidAttribute), na.rm = TRUE), Cases = sum(Cases, na.rm = TRUE), Deaths = sum(Deaths, na.rm = TRUE))
merged_covid_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(covid_data, by = c("STUSPS" = "state"))
return(merged_covid_data)
})
pal <- colorBin(palette = "YlOrRd", domain = c(0, 30), bins = 5, na.color = "transparent")
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>% # Fit the map to the US bounds
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(COVID_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Less than HS Diploma: ", round(Education_Less_HS, 2), "%<br>",
"High School Diploma Only: ", round(High_School_Diploma_Only, 2), "%<br>",
"Some College: ", round(Some_College, 2), "%<br>",
"Bachelor's or Higher: ", round(Bachelors_Or_Higher, 2), "%")
) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
output$covidMapOutput <- renderLeaflet({
data <- covidData() # Use the reactive COVID data
# Generate popup content dynamically based on selected attribute
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("PuBuGn", COVID_Level)(COVID_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Cases: ", formatC(as.integer(Cases), big.mark=","), "<br>",
"Deaths: ", formatC(as.integer(Deaths), big.mark=","), ""))
# ) %>%
# addLegend("bottomright",  pal = colorQuantile("YlOrRd", data$COVID_Level), values = ~COVID_Level,
#           title = input$covidAttribute,
#           opacity = 0.7)
})
# No need for observeEvent if the map automatically updates with input$apply due to reactive dependencies
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
library(viridis) # For color palettes
library(RColorBrewer) # For color palettes
# Step 1: Create a state name to abbreviation mapping
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE),
Education_Less_HS = mean(`Percent of adults with less than a high school diploma`, na.rm = TRUE),
High_School_Diploma_Only = mean(`Percent of adults with a high school diploma only`, na.rm = TRUE),
Some_College = mean(`Percent of adults completing some college or associate's degree`, na.rm = TRUE),
Bachelors_Or_Higher = mean(`Percent of adults with a bachelor's degree or higher`, na.rm = TRUE)
)
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Reactive expression for loading and preparing COVID data for 2023-03-23
covidData <- reactive({
covid_data <- read_csv("database/us-states-output.csv") %>%
mutate(Date = as.Date(date, format = "%m/%d/%y")) %>%
filter(Date == as.Date("2023-03-23", format = "%Y-%m-%d")) %>%
group_by(state) %>%
summarise(COVID_Level = sum(get(input$covidAttribute), na.rm = TRUE), Cases = sum(Cases, na.rm = TRUE), Deaths = sum(Deaths, na.rm = TRUE))
merged_covid_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(covid_data, by = c("STUSPS" = "state"))
return(merged_covid_data)
})
pal <- colorBin(palette = "YlOrRd", domain = c(0, 30), bins = 5, na.color = "transparent")
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>% # Fit the map to the US bounds
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Less than HS Diploma: ", round(Education_Less_HS, 2), "%<br>",
"High School Diploma Only: ", round(High_School_Diploma_Only, 2), "%<br>",
"Some College: ", round(Some_College, 2), "%<br>",
"Bachelor's or Higher: ", round(Bachelors_Or_Higher, 2), "%")
) %>%
addLegend(pal = pal, values = ~COVID_Level,
title = input$covidAttribute,
opacity = 0.7)
})
output$covidMapOutput <- renderLeaflet({
data <- covidData() # Use the reactive COVID data
# Generate popup content dynamically based on selected attribute
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("PuBuGn", COVID_Level)(COVID_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Cases: ", formatC(as.integer(Cases), big.mark=","), "<br>",
"Deaths: ", formatC(as.integer(Deaths), big.mark=","), ""))
# ) %>%
# addLegend("bottomright",  pal = colorQuantile("YlOrRd", data$COVID_Level), values = ~COVID_Level,
#           title = input$covidAttribute,
#           opacity = 0.7)
})
# No need for observeEvent if the map automatically updates with input$apply due to reactive dependencies
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
library(viridis) # For color palettes
library(RColorBrewer)
# Step 1: Create a state name to abbreviation mapping
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE),
Education_Less_HS = mean(`Percent of adults with less than a high school diploma`, na.rm = TRUE),
High_School_Diploma_Only = mean(`Percent of adults with a high school diploma only`, na.rm = TRUE),
Some_College = mean(`Percent of adults completing some college or associate's degree`, na.rm = TRUE),
Bachelors_Or_Higher = mean(`Percent of adults with a bachelor's degree or higher`, na.rm = TRUE)
)
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
# Reactive expression for loading and preparing COVID data for 2023-03-23
covidData <- reactive({
covid_data <- read_csv("database/us-states-output.csv") %>%
mutate(Date = as.Date(date, format = "%m/%d/%y")) %>%
filter(Date == as.Date("2023-03-23", format = "%Y-%m-%d")) %>%
group_by(state) %>%
summarise(COVID_Level = sum(get(input$covidAttribute), na.rm = TRUE), Cases = sum(Cases, na.rm = TRUE), Deaths = sum(Deaths, na.rm = TRUE))
merged_covid_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(covid_data, by = c("STUSPS" = "state"))
return(merged_covid_data)
})
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>% # Fit the map to the US bounds
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Less than HS Diploma: ", round(Education_Less_HS, 2), "%<br>",
"High School Diploma Only: ", round(High_School_Diploma_Only, 2), "%<br>",
"Some College: ", round(Some_College, 2), "%<br>",
"Bachelor's or Higher: ", round(Bachelors_Or_Higher, 2), "%")
) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
output$covidMapOutput <- renderLeaflet({
data <- covidData() # Use the reactive COVID data
# Generate popup content dynamically based on selected attribute
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("PuBuGn", COVID_Level)(COVID_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Cases: ", formatC(as.integer(Cases), big.mark=","), "<br>",
"Deaths: ", formatC(as.integer(Deaths), big.mark=","), ""))
# ) %>%
# addLegend("bottomright",  pal = colorQuantile("YlOrRd", data$COVID_Level), values = ~COVID_Level,
#           title = input$covidAttribute,
#           opacity = 0.7)
})
# No need for observeEvent if the map automatically updates with input$apply due to reactive dependencies
}
# Run the app
shinyApp(ui, server)
