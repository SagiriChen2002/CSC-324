})
covidVaccinationData <- reactive({
covid_data <- read_csv("database/cdc_vaccines_distributed_administered_by_jurisdiction.csv") %>%
group_by(State) %>%
summarise(Doses_Distributed = sum(doses_distributed, na.rm = TRUE),
Doses_Administered = sum(doses_administered, na.rm = TRUE))
merged_covid_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(covid_data, by = c("STUSPS" = "State"))
return(merged_covid_data)
})
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>% # Fit the map to the US bounds
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Less than HS Diploma: ", round(Education_Less_HS, 2), "%<br>",
"High School Diploma Only: ", round(High_School_Diploma_Only, 2), "%<br>",
"Some College: ", round(Some_College, 2), "%<br>",
"Bachelor's or Higher: ", round(Bachelors_Or_Higher, 2), "%")
) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
output$covidMapOutput <- renderLeaflet({
data <- covidVaccinationData() # Use the reactive expression for COVID data
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlGnBu", Doses_Administered / Doses_Distributed)(Doses_Administered / Doses_Distributed),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Doses Distributed: ", Doses_Distributed, "<br>",
"Doses Administered: ", Doses_Administered)
) %>%
addLegend("bottomright", pal = colorQuantile("YlGnBu", data$Doses_Administered / data$Doses_Distributed), values = ~Doses_Administered / Doses_Distributed,
title = "Vaccination Rate",
opacity = 0.7)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(readr) # For read_csv
# Assuming us_states is preloaded and transformed outside the server function for simplicity in this example
# us_states <- st_read("path_to_shapefile.shp")
# us_states <- st_transform(us_states, 4326)
server <- function(input, output, session) {
# Reactive expression for loading and preparing education data
educationData <- reactive({
education_data <- read_csv("database/Education.csv") %>%
group_by(State) %>%
summarise(Education_Level = mean(get(input$educationAttribute), na.rm = TRUE),
Education_Less_HS = mean(`Percent of adults with less than a high school diploma`, na.rm = TRUE),
High_School_Diploma_Only = mean(`Percent of adults with a high school diploma only`, na.rm = TRUE),
Some_College = mean(`Percent of adults completing some college or associate's degree`, na.rm = TRUE),
Bachelors_Or_Higher = mean(`Percent of adults with a bachelor's degree or higher`, na.rm = TRUE)
)
merged_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(education_data, by = c("STUSPS" = "State"))
return(merged_data)
})
covidVaccinationData <- reactive({
covid_data <- read_csv("database/cdc_vaccines_distributed_administered_by_jurisdiction.csv") %>%
group_by(State) %>%
summarise(Doses_Distributed = sum(doses_distributed, na.rm = TRUE),
Doses_Administered = sum(doses_administered, na.rm = TRUE))
merged_covid_data <- st_read("US_geographic_dataset/cb_2018_us_state_20m.shp") %>%
st_transform(., 4326) %>%
left_join(covid_data, by = c("STUSPS" = "State"))
return(merged_covid_data)
})
# Output for the map, which depends on the reactive education data
output$mapOutput <- renderLeaflet({
# Call the reactive expression and store its result
data <- educationData() # Correctly calling the reactive expression
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>% # Fit the map to the US bounds
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", Education_Level)(Education_Level),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Less than HS Diploma: ", round(Education_Less_HS, 2), "%<br>",
"High School Diploma Only: ", round(High_School_Diploma_Only, 2), "%<br>",
"Some College: ", round(Some_College, 2), "%<br>",
"Bachelor's or Higher: ", round(Bachelors_Or_Higher, 2), "%")
) %>%
addLegend("bottomright", pal = colorQuantile("YlOrRd", data$Education_Level), values = ~Education_Level,
title = input$educationAttribute,
opacity = 0.7)
})
output$covidMapOutput <- renderLeaflet({
data <- covidVaccinationData() # Use the reactive expression for COVID data
leaflet(data = data) %>%
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~colorQuantile("YlGnBu", Doses_Administered / Doses_Distributed)(Doses_Administered / Doses_Distributed),
fillOpacity = 0.7,
weight = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
popup = ~paste(NAME, "<br>",
"Doses Distributed: ", Doses_Distributed, "<br>",
"Doses Administered: ", Doses_Administered)
) %>%
addLegend("bottomright", pal = colorQuantile("YlGnBu", data$Doses_Administered / data$Doses_Distributed), values = ~Doses_Administered / Doses_Distributed,
title = "Vaccination Rate",
opacity = 0.7)
})
}
# Run the app
shinyApp(ui, server)
library(shiny); runApp('CSC-324/project.R')
library(shiny); runApp('CSC-324/project.R')
knitr::opts_chunk$set(echo = TRUE)
df <- data.frame(id = 1:5, fruit = c("apple", "banana", "cherry", "date", "fig"))
selected_fruits <- c("banana", "cherry", "fig")
filtered_df <- df[df$fruit %in% selected_fruits, ]
print(filtered_df)
# Output: Rows for banana, cherry, and fig
directory <- "/Users/haobo"
filename <- "homework"
extension <- ".txt"
full_path <- paste0(directory, "/", filename, extension)
print(full_path)
# Output: "/Users/haobo/homework.txt"
install.packages("languageserver")
library(shiny); runApp('CSC-324/project.R')
library(shiny); runApp('CSC-324/project.R')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
vaccine_data <- read_csv("cdc_vaccines_distributed_administered_by_jurisdiction.csv")
ui <- fluidPage(
titlePanel("COVID-19 Vaccine Data"),
sidebarLayout(
sidebarPanel(
selectInput("state", "Select a state:", choices = unique(vaccine_data$Jurisdiction)),
selectInput("vaccine", "Select a vaccine:", choices = unique(vaccine_data$Vaccine_Type))
),
mainPanel(
plotOutput("vaccine_plot")
)
)
)
server <- function(input, output) {
output$vaccine_plot <- renderPlot({
filtered_data <- vaccine_data %>%
filter(Jurisdiction == input$state, Vaccine_Type == input$vaccine)
ggplot(filtered_data, aes(x = Week, y = Doses_Distributed)) +
geom_line() +
labs(title = "Doses Distributed by Week")
})
}
shinyApp(ui, server)
library(shiny)
vaccine_data <- read_csv("cdc_vaccines_distributed_administered_by_jurisdiction.csv")
ui <- fluidPage(
titlePanel("COVID-19 Vaccine Data"),
sidebarLayout(
sidebarPanel(
selectInput("state", "Select a state:", choices = unique(vaccine_data$Jurisdiction)),
),
mainPanel(
plotOutput("vaccine_plot")
)
)
)
server <- function(input, output) {
output$vaccine_plot <- renderPlot({
filtered_data <- vaccine_data %>%
filter(Jurisdiction == input$state, Vaccine_Type == input$vaccine)
ggplot(filtered_data, aes(x = Week, y = Doses_Distributed)) +
geom_line() +
labs(title = "Doses Distributed by Week")
})
}
shinyApp(ui, server)
library(shiny)
vaccine_data <- read_csv("cdc_vaccines_distributed_administered_by_jurisdiction.csv")
ui <- fluidPage(
titlePanel("COVID-19 Vaccine Data"),
sidebarLayout(
sidebarPanel(
selectInput("state", "Select a state:", choices = unique(vaccine_data$state)),
),
mainPanel(
plotOutput("vaccine_plot")
)
)
)
server <- function(input, output) {
output$vaccine_plot <- renderPlot({
filtered_data <- vaccine_data %>%
filter(Jurisdiction == input$state, Vaccine_Type == input$vaccine)
ggplot(filtered_data, aes(x = Week, y = Doses_Distributed)) +
geom_line() +
labs(title = "Doses Distributed by Week")
})
}
shinyApp(ui, server)
library(shiny)
vaccine_data <- read_csv("cdc_vaccines_distributed_administered_by_jurisdiction.csv")
ui <- fluidPage(
titlePanel("COVID-19 Vaccine Data"),
sidebarLayout(
sidebarPanel(
selectInput("state", "Select a state:", choices = unique(vaccine_data$state_name)),
),
mainPanel(
plotOutput("vaccine_plot")
)
)
)
server <- function(input, output) {
output$vaccine_plot <- renderPlot({
filtered_data <- vaccine_data %>%
filter(Jurisdiction == input$state, Vaccine_Type == input$vaccine)
ggplot(filtered_data, aes(x = Week, y = Doses_Distributed)) +
geom_line() +
labs(title = "Doses Distributed by Week")
})
}
shinyApp(ui, server)
library(shiny)
vaccine_data <- read_csv("cdc_vaccines_distributed_administered_by_jurisdiction.csv")
ui <- fluidPage(
titlePanel("COVID-19 Vaccine Data"),
sidebarLayout(
sidebarPanel(
selectInput("state", "Select a state:", choices = unique(vaccine_data$state_name)),
),
mainPanel(
plotOutput("vaccine_plot")
)
)
)
server <- function(input, output) {
output$vaccine_plot <- renderPlot({
filtered_data <- vaccine_data %>%
filter(Jurisdiction == input$state_name)
ggplot(filtered_data, aes(x = Week, y = doses_distributed)) +
geom_line() +
labs(title = "Doses Distributed by Week")
})
}
shinyApp(ui, server)
# Load the required libraries
library(shiny)
library(readr)
# Define UI
ui <- fluidPage(
titlePanel("CDC Vaccination Data Viewer"),
mainPanel(
tableOutput("viewData") # Display the data as a table
)
)
# Define server logic
server <- function(input, output) {
# Reactive expression to read the data
vaccine_data <- reactive({
read_csv("cdc_vaccines_distributed_administered_by_jurisdiction.csv")
})
# Output the data to the UI
output$viewData <- renderTable({
# Access the reactive vaccine_data() to get the data frame
vaccine_data() %>% head() # Display just the first few rows as an example
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(readr)
library(dplyr)
# Define UI
ui <- fluidPage(
titlePanel("CDC Vaccination Data Viewer by State"),
sidebarLayout(
sidebarPanel(
selectInput("selectedState", "Select a State:",
choices = c("All" = "All"),
selected = "All")
),
mainPanel(
tableOutput("viewData") # Display the data as a table
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive expression to read the data
vaccine_data <- reactive({
read_csv("cdc_vaccines_distributed_administered_by_jurisdiction.csv")
})
# Dynamically update the choices for selectInput based on the data
observe({
updateSelectInput(session, "selectedState",
choices = c("All", unique(vaccine_data()$state_name)))
})
# Filter the data based on the selected state
filtered_data <- reactive({
if (input$selectedState == "All") {
vaccine_data()
} else {
vaccine_data() %>% filter(state == input$selectedState)
}
})
# Output the filtered data to the UI
output$viewData <- renderTable({
filtered_data() %>% head() # Display just the first few rows as an example
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(readr)
library(dplyr)
# Define UI
ui <- fluidPage(
titlePanel("CDC Vaccination Data Viewer by State"),
sidebarLayout(
sidebarPanel(
selectInput("selectedState", "Select a State:",
choices = c("All" = "All"),
selected = "All")
),
mainPanel(
tableOutput("viewData") # Display the data as a table
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive expression to read the data
vaccine_data <- reactive({
read_csv("cdc_vaccines_distributed_administered_by_jurisdiction.csv")
})
# Dynamically update the choices for selectInput based on the data
observe({
updateSelectInput(session, "selectedState",
choices = c("All", unique(vaccine_data()$state_name)))
})
# Filter the data based on the selected state
filtered_data <- reactive({
if (input$selectedState == "All") {
vaccine_data()
} else {
vaccine_data() %>% filter(state == input$selectedState)
}
})
# Output the filtered data to the UI
output$viewData <- renderTable({
filtered_data() %>% head() # Display just the first few rows as an example
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(readr)
library(dplyr)
# Define UI
ui <- fluidPage(
titlePanel("CDC Vaccination Data Viewer by State"),
sidebarLayout(
sidebarPanel(
selectInput("selectedState", "Select a State:",
choices = c("All" = "All"),
selected = "All")
),
mainPanel(
tableOutput("viewData") # Display the data as a table
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive expression to read the data
vaccine_data <- reactive({
read_csv("cdc_vaccines_distributed_administered_by_jurisdiction.csv")
})
# Dynamically update the choices for selectInput based on the data
observe({
updateSelectInput(session, "selectedState",
choices = c("All", unique(vaccine_data()$state_name)))
})
# Filter the data based on the selected state
filtered_data <- reactive({
if (input$selectedState == "All") {
vaccine_data()
} else {
vaccine_data() %>% filter(state_name == input$selectedState)
}
})
# Output the filtered data to the UI
output$viewData <- renderTable({
filtered_data() %>% head() # Display just the first few rows as an example
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(dplyr)
library(lubridate)
library(ggplot2)
# Load the data
data <- read.csv("time_logs.csv")
# Split the 'TIME' column into 'Start' and 'End', assuming 'TIME' format is "2024-01-26 8:30PM - 10:28PM"
data <- data %>%
mutate(StartTime = gsub(" - .*", "", TIME),
EndTime = gsub(".*- ", "", TIME),
Date = as.Date(StartTime, format="%m-%d-%Y"))
# Convert 'StartTime' and 'EndTime' to POSIXct, assuming they are in the same day
data <- data %>%
mutate(StartTime = mdy_hm(paste(StartTime)),
EndTime = mdy_hm(paste(substr(data$Start, 1, 11), EndTime)))
# Calculate the duration in hours or minutes
data <- data %>%
mutate(Duration = as.numeric(difftime(EndTime, StartTime, units="hours")))  # Or use 'mins' for minutes
# View the modified data
head(data)
# Plotting the start times
ggplot(data, aes(x=Date, y=Duration)) +  # Replace 'Value' with the actual value column name
geom_point() +  # Or geom_line() if you want to connect the points
labs(title="Individual Project Time Log", x="Date", y="Time") +
theme_minimal()
# Assuming 'data' is your DataFrame and it has been loaded previously
# Aggregate data to calculate average duration per week
aggregate_data <- aggregate(Duration ~ Date, data, mean, na.rm = TRUE)
# Create a bar plot
aggregate_data$FormattedDate <- format(aggregate_data$Date, "%m-%d")
y_max <- 6  # Adds 10% padding to the max value for better display
barplot(aggregate_data$Duration,
names.arg = aggregate_data$FormattedDate,
col = "blue",
main = "Individual Project Time Log",
xlab = "Date",
ylab = "Average Duration (mins)",
ylim = c(0, y_max),  # Adjust y-axis limits
las = 2,  # Makes the axis labels perpendicular to the axis
cex.names = 0.7)  # Adjusts the size of the week labels
# Load necessary libraries
library(dplyr)
library(lubridate)
library(ggplot2)
# Load the data
data <- read.csv("time_logs.csv")
# Load necessary libraries
library(dplyr)
library(lubridate)
library(ggplot2)
# Load the data
data <- read.csv("time_logs.csv")
# Load the data
data <- read.csv("time_logs.csv")
# Load the data
data <- read.csv("time_logs.csv")
library(lubridate)
library(shiny); runApp('CSC-324/project.R')
gc()
library(shiny); runApp('CSC-324/project.R')
library(shiny); runApp('CSC-324/project.R')
runApp('CSC-324/project.R')
runApp('CSC-324/project.R')
runApp('CSC-324/project.R')
library(shiny); runApp('CSC-324/project.R')
runApp('CSC-324/project.R')
runApp('CSC-324/project.R')
runApp('CSC-324/project.R')
runApp('CSC-324/project.R')
runApp('CSC-324/project.R')
runApp('CSC-324/project.R')
runApp('CSC-324/project.R')
library(shiny); runApp('CSC-324/project.R')
